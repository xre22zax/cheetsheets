1. SELECT * FROM tablenaem;



	Statement: text that database know as valid command
	Clause:	   specific task in sql capital letter
	parameter: list of columns, data type, value pass to clause

2. CREATE TABLE tablename (
	id INTEGER,
	name TEXT	  )




3. INSERT INTO tablename ( id, name, age)
4. VALUES (1. "reza", 22)



5. ALTER TABLE tablename 
	ADD COLUMN columnname TEXT;



6. UPDATE tablename					**edit arow whitch exist**
	SET columnname = "text"	
	WHERE id = 4;					**id is row number**



7. DELETE FROM tablename
	WHERE columnname IS value;



8. Constraints		**reject data that not adhere to certain restricyion**

	CREATE TABLE  tablename(
	ID INTEGER PRIMARY KEY,
	name TEXT UNIQUE,		**diffrent value for rows**
	date TEXT NOT NULL,
	age INTEGER DEFUALT 10)

CLI:  .schema		output create tables we used



9. SELECT column1, column2 FROM table name;



10. SELECT column1 AS "column2" FROM tablename;			**rename select column only on resualt**



11. SELECT DISTINCT column FROM tablename;		**return unique value of columns**



12. WHERE 		Include rows whitch only condition is true
	=	!=	>	<	<=	>=

	SELECT * FROM tablename WHERE row>10;



13. SELECT * FROM tablename WHERE column LIKE 'co--mn';



14. SELECT * FROM tablename WHERE column LIKE 'A%';




15. SELECT * FROM tablename WHERE columnname IS NOT NULL:



16. SELECT * FROM tablename WHERE columnname BETWEEN 'A' AND 'B';



17. SELECT * FROM tablename ORDER BY columnname ASC;  (or DESC)


18. SELECT * FROM tablename LIMIT 10;



19. CASE	Return diffrent output on each condition if-then

	SELECT name,
		CASE
			WHEN column > 1 THEN 'great'
			WHEN column < 1 THEN 'small'
			ELSE 'Avoid'
		END AS 'review'
	FROM tablename;



20. SELECT COUNT(*) FROM tablename;
	SUM()	MAX()	MIN()	AVG()	ROUND(columnname, INT)



21. SELECT columnname, AVG(columnname)
	FROM tablename
	WHERE condition
	GROUP BY columnname
	ORDER BY column	
	LIMIT 10;



22. HAVING	Use for groups instead of where
	
	SELECT column, column1
		FROM table
		GROUP BY 1, 2
		HAVING COUNT(column1)>2;


23. SELECT STRFtime('%H', column) FROM tablename;



24.  SELECT * FROM table1
	JOIN table 2
	ON table1.column = table2.column



25. SELECT * FROM table1 	
	LEFT JOIN table 2			**only select left table**
	ON table2.column = table2.column	**whitch is equal**
	WHERE table2.column IS NULL;		**show the not selected**

ex (left join 3 table with user id and select columns we need, build a funnel):
WITH funnels AS (				**create a table**
  SELECT 
     DISTINCT b.browse_date,
     b.user_id,
     c.user_id IS NOT NULL AS 'is_checkout',
     p.user_id IS NOT NULL AS 'is_purchase'
  FROM browse AS 'b'
  LEFT JOIN checkout AS 'c'
    ON c.user_id = b.user_id
  LEFT JOIN purchase AS 'p'
    ON p.user_id = c.user_id)
SELECT browse_date,				**select wanted column**
   COUNT(*) AS 'num_browse',
   SUM(is_checkout) AS 'num_checkout',		**calculate things we want and create a colunm**
   SUM(is_purchase) AS 'num_purchase',
   1.0 * SUM(is_checkout) / COUNT(user_id) AS 'browse_to_checkout',
   1.0 * SUM(is_purchase) / SUM(is_checkout) AS 'checkout_to_purchase'
FROM funnels
GROUP BY browse_date				**group them with date to see what happen in each date**
ORDER BY browse_date;


26. SELECT * FROM table1 			**join all the rows of 2 table**
	CROSS JOIN table2



27. SELECT * FROM table1
		UNION				**put data togather & whitch on top columns should be same**
	SELECT * FROM table2;



28. WITH defaultname AS)			**with id use to write any temprory table we want**
		SELECT ....
		.....
		.....
		.....
		.....)
    SELECT * .........	



29. Window Function Syntax

SELECT 
   month,
   SUM(change_in_followers) OVER (		**Over is where function began**
      ORDER BY month
   ) AS 'running_total'
FROM
   social_media
WHERE
   username = 'instagram';



30. PARTITION BY

SELECT 
    username,
    AVG(change_in_followers) OVER (
      PARTITION BY username 			**PARTITION BY allows you to see all of the resultant rows**
      ORDER BY month
    ) 'running_avg_followers_change'
FROM
    social_media;


31. FIRST_VALUE() or LAST_VALUE()

SELECT
   username,
   posts,
   FIRST_VALUE (posts) OVER (
      PARTITION BY username 
      ORDER BY posts
   ) fewest_posts
FROM
   social_media;

SELECT
   username,
   posts,
   LAST_VALUE (posts) OVER (
      PARTITION BY username 
      ORDER BY posts
      RANGE BETWEEN UNBOUNDED PRECEDING AND 	**to show us the most posts for a user, we need to specify a frame for our window function.**
      UNBOUNDED FOLLOWING
    ) most_posts
FROM
    social_media;


32. LAG - specified offset which comes before (LAG) or after (LEAD) the current row.

SELECT
   artist,
   week,
   streams_millions,
   streams_millions - 
   LAG(streams_millions, 1, 0) OVER (			**get 3 value: column, offset, replace null**
      ORDER BY week 
   ) previous_week_streams 
FROM
   streams 						**this code gets the before stream and minus the current one **


33. LEAD

SELECT
   artist,
   week,
   streams_millions,
   LEAD(streams_millions, 1) OVER (
      PARTITION BY artist
      ORDER BY week
   ) - streams_millions AS 'streams_millions_change'
FROM
   streams;


34.ROW_NUMBER : adds a sequential integer number to each row

SELECT 
   ROW_NUMBER() OVER (
      ORDER BY streams_millions DESC 
   ) AS 'row_num', 
   artist, 
   week,
   streams_millions
FROM
   streams;


35. RANK : when two values are the same, they will have the same rank whereas with ROW_NUMBER they would not.

SELECT 
   RANK() OVER (
      ORDER BY streams_millions
   ) AS 'rank', 
   artist, 
   week,
   streams_millions
FROM
   streams;


36. NTILE : break your data into roughly equal groups

SELECT 
   NTILE(5) OVER (
      ORDER BY streams_millions DESC
   ) AS 'weekly_streams_group', 
   artist, 
   week,
   streams_millions
FROM
   streams;


37. ABS() function returns the absolute value of the input expression.

SELECT ABS(-3); -- 3


38. CAST() function is used to convert the value of an expression into another data type.

SELECT CAST('3.14 is pi' AS REAL) / 2;


39. Date and Time Functions

SELECT DATETIME('now', 'localtime');
SELECT DATETIME('2020-09-01 17:38:22');
SELECT DATETIME('2020-02-10', 'start of month', '-1 day', '+7 hours');



40. STRFTIME()

SELECT STRFTIME('%d', order_date) AS 'order_day',
  COUNT(*) 
FROM bakery
GROUP BY 1
ORDER BY 2 DESC;


41. Compare Funnels For A/B testing

ex:
SELECT modal_text,
  COUNT(DISTINCT CASE
    WHEN ab_group = 'control' THEN user_id
    END) AS 'control_clicks',
  COUNT(DISTINCT CASE
    WHEN ab_group = 'variant' THEN user_id
    END) AS 'variant_clicks'
FROM onboarding_modals
GROUP BY 1
ORDER BY 1;


42. CALCULATING CHURN

Single Month ex:
SELECT 1.0 *
(
  SELECT COUNT(*) 
  FROM subscriptions 
  WHERE subscription_start < '2017-01-01'
  AND (
    subscription_end
    BETWEEN '2017-01-01' AND '2017-01-31'
  ) 
) / (
  SELECT COUNT(*)
  FROM subscriptions
  WHERE subscription_start < '2017-01-01'
  AND (
    (subscription_end >= '2017-01-01')
    OR (subscription_end IS NULL) 
  )
)
AS result;

OR

WITH enrollments as 
(SELECT * FROM subscriptions
WHERE subscription_start  < '2017-01-01'
AND (
  (subscription_end >= '2017-01-01')
  OR (subscription_end IS NULL)
)),
status AS(
  SELECT CASE
  WHEN (subscription_end > '2017-01-31')
  OR (subscription_end IS NULL) THEN 0
  ELSE 1 
  END as is_canceled,

  CASE
    WHEN subscription_start < '2017-01-01'
      AND (
        (subscription_end >= '2017-01-01')
        OR (subscription_end IS NULL)
      ) THEN 1
      ELSE 0
      END AS is_active
      FROM enrollments
)

SELECT 1.0 * SUM(is_canceled) / SUM(is_active)
FROM status


##Cross Join Months and Users

WITH months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
-- Add temporary cross_join definition here
cross_join AS(
SELECT * FROM subscriptions
CROSS JOIN months)
SELECT *
FROM cross_join
LIMIT 100;


##Multiple Month: Determine Active & CANCELL Status AND count for each month and churn rate

WITH months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months),
status AS
(SELECT id, first_day as month,
CASE
  WHEN (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active,
CASE 
  WHEN subscription_end BETWEEN first_day AND last_day THEN 1
  ELSE 0
END as is_canceled
FROM cross_join),
status_aggregate AS
(SELECT
  month,
  SUM(is_active) as active,
  SUM(is_canceled) as canceled
FROM status
GROUP BY month)
-- add your churn calculation here
SELECT month,
1.0 * status_aggregate.canceled / status_aggregate.active
AS churn_rate
FROM status_aggregate


## Attribution Query : modify the first-touch attribution query to get last-touch attribution

WITH last_touch AS(
  SELECT user_id,
    MAX(timestamp) AS 'last_touch_at'
  FROM page_visits
  GROUP BY user_id)
SELECT lt.user_id,
  lt.last_touch_at,
  pv.utm_source
FROM last_touch AS 'lt'
JOIN page_visits AS 'pv'
  ON lt.user_id = pv.user_id
  AND lt.last_touch_at = pv.timestamp
WHERE lt.user_id = 10069;


