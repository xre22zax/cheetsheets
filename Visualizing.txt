#Visualizing Quantitative Variables

import matplotlib.pyplot as plt 
import seaborn as sns


#Line Plot
x_values = [0, 1, 2, 3, 4]
y_values = [0, 1, 4, 9, 16]
plt.plot(x_values, y_values, color='green', linestyle='--', marker='o')
plt.show()


#zoom - axis
plt.axis([minimum x-value, maximum x-value, minimum y-value, maximum y-value])
plt.axis([0, 3, 2, 5])


#Labeling the Axes
plt.xlabel('Time')
plt.ylabel('Dollars spent on coffee')
plt.title('My Last Twelve Years of Coffee Drinking')


#subplots
plt.subplot(rows, columns, index)
	ex:
plt.subplot(1, 2, q)
plt.plot(temperature, flights_to_hawaii, "o")		==> "o" is for scatter
plt.show()

##plt.subplots_adjust()
| command | default |
|---------|---------|
|  left   |  0.125  |
|  right  |  0.9    |
|  bottom |  0.1    |
|  top    |  0.9    |
|  wspace |  0.2    |
|  hspace |  0.2    |

ex:	plt.subplots_adjust(top=0.95, hspace=0.25)


#legends
plt.legend(['parabola', 'cubic'], loc=2)
or
plt.plot([0, 1, 2, 3, 4], [0, 1, 4, 9, 16], label="parabola")
plt.plot([0, 1, 2, 3, 4], [0, 1, 8, 27, 64], label="cubic")
plt.legend() # Still need this command!


#Modify Ticks
plt.plot(months, conversion)
ax = plt.subplot()
ax.set_xticks(months)
ax.set_xticklabels(month_names)
ax.set_yticks([0.10, 0.25, 0.5, 0.75])
ax.set_yticklabels(['10%', '25%', '50%', '75%'])
plt.show()


#figure
plt.figure(figsize=(4, 10)) 
plt.plot(x, parabola)
plt.savefig('tall_and_narrow.png')


------
## Boxplot for rent
sns.boxplot(x='rent', data=my_df)
plt.show()
plt.close()


###Side-by-side box plots
sns.boxplot(data=my_df, x= 'address', y='col2')
plt.show()




---
## Histogram for rent
sns.histplot(x='rent', data=my_df)
plt.axvline(2, color = 'r')
plt.show()
plt.close()




###Overlapping Histograms
plt.hist(scores_GP , color="blue", label="GP", normed=True, alpha=0.5)
plt.hist(scores_MS , color="red", label="MS", normed=True, alpha=0.5)
plt.legend()  
plt.show()

!plt.legend show labels on plot
!alpha = .5 ensures that the histograms are see-through
!normed=True make sure that the y-axis is a density rather than a frequency
!plt.hist(dataset, range=(66,69), bins=40)
!histtype='step'    to draw just the outline of a histogram
!density=True		divides the height of each column by a constant 


ex: plt.hist(sales_times1, range=(66,69), bins=20, density=True, alpha=0.4, histtype='step', linewidth=2)

---
##Scatter Plots
plt.scatter(x = mydf.price, y = mydf.sqfeet)
plt.xlabel('Rental Price (USD)')
plt.ylabel('Area (Square Feet)')
plt.show()


#linear model with hue (Scatter Plots)
sns.lmplot(x = 'completed', y = 'score', hue = 'lesson', data = codecademy)
plt.show()

------------
#Visualizing Categorical Variables

---
## Bar chart for borough
sns.countplot(x='borough', data=rentals)
plt.show()
plt.close()

plt.bar(range(len(sales)), sales)
plt.show()


#Side-By-Side Bars

# list comprehension
n = 1  # This is our first dataset (out of 2)
t = 2 # Number of datasets
d = 7 # Number of sets of bars
w = 0.8 # Width of each bar
x_values1 = [t*element + w*n for element
             in range(d)]

!def create_x(t, w, n, d):
    return [t*x + w*n for x in range(d)]


///
ex:
drinks = ["cappuccino", "latte", "chai", "americano", "mocha", "espresso"]
sales1 =  [91, 76, 56, 66, 52, 27]
sales2 = [65, 82, 36, 68, 38, 40]

#Paste the x_values code here
n = 1  # This is our first dataset (out of 2)
t = 2 # Number of datasets
d = 6 # Number of sets of bars
w = 0.8 # Width of each bar
store1_x  = [t*element + w*n for element
             in range(d)]
plt.bar(store1_x, sales1)

n = 2  # This is our second dataset (out of 2)
t = 2 # Number of datasets
d = 6 # Number of sets of bars
w = 0.8 # Width of each bar
store2_x = [t*element + w*n for element
             in range(d)]
plt.bar(store2_x, sales2)

///



---
#Stacked Bars
plt.bar(range(len(sales1)), sales1)
plt.bar(range(len(sales2)), sales2, bottom=sales1)
plt.show()


c_bottom = np.add(As, Bs)


---
#Error Bars
values = [10, 13, 11, 15, 20]
yerr = [1, 3, 0.5, 2, 4]
plt.bar(range(len(values)), values, yerr=yerr, capsize=10)
plt.show()


---
#Fill Between
plt.fill_between(months, y_upper, y_lower, alpha=0.2)
ex:
///

months = range(12)
month_names = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
revenue = [16000, 14000, 17500, 19500, 21500, 21500, 22000, 23000, 20000, 19500, 18000, 16500]

y_lower  = [i - 0.1 * i for i in revenue]
y_upper = [i * 1.1 for i in revenue]


plt.plot(months, revenue)
plt.fill_between(months, y_upper, y_lower, alpha=0.2)     ==> alpha is opacity
plt.show()

///


---
#countplot
.countplot() only take on variable

import seaborn as sns
sns.countplot(flu_results["Results"])
plt.show()

##order for nominal data
sns.countplot(df["victory_status"], order=df["victory_status"].value_counts(ascending=True).index)


##order for ordinal data
sns.countplot(df["Grade Level"], order=["First Year", "Second Year", "Third Year", "Fourth Year"])



---
## Pie chart for borough
rentals.borough.value_counts().plot.pie()
plt.show()
plt.close()


plt.pie(payment_method)
plt.axis('equal')     ==>make chart round
plt.show()


##Pie Chart Labeling
plt.pie(budget_data)
plt.legend(budget_categories)

or

plt.pie(budget_data, labels=budget_categories)		==> on the chart

or

plt.pie(budget_data,labels=budget_categories, autopct='%0.1f%%')		==> means 1 decimal show on chart with % also '%d%%' â€” rounded to the nearest int with %



wedge_sizes = student_grades["Proportions"]
grade_labels = student_grades["Grades"]
plt.pie(wedge_sizes, labels = grade_labels)
plt.axis('equal')


---

##crosstab 
pd.crosstab(mydf.influence, mydf.leader)


!plt.clf()  ==> clears the current Axes state without closing the Axes.
!plt.title("2010 Season") ==> on head of plot
!plt.close('all') ==>	to clear all existing plots before you plot a new one.